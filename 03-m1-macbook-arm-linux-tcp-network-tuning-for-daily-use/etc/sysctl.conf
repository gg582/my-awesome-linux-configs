## Enlarge the transfer window
net.ipv4.tcp_window_scaling=1
## I don't need high performance for a laptop
## 200 Kibibyte
## A laptop is a client. It does not require many write tasks
net.core.rmem_max=358400
net.core.wmem_max=204800 
## More aggressive TCP RMEM and WMEM (max buffer sizes)
net.ipv4.tcp_rmem=4096 131072 358400
net.ipv4.tcp_wmem=4096 131072 204800

## Follow RFC1323
net.ipv4.tcp_timestamps=1

## Input packet buffer (reasonable size, ram is 8G)
net.core.netdev_max_backlog=2048

## Memory management tuning for 8GB macOS
vm.swappiness=70
## Prevent write burst
vm.dirty_ratio=8
vm.dirty_background_ratio=4
## Save energy by setting longer dirty memory expiration periods
vm.dirty_expire_centisecs=4000

## TCP connection timeout tuning
## Hardware Compatibility is not good as macOS
## This can be safer for ARM64 Port Native Linux
## Use shorter timeouts. This is a laptop
net.ipv4.tcp_fin_timeout=30
net.ipv4.tcp_keepalive_time=200

## Maximum connections backlog(considered insufficient RAM)
net.core.somaxconn=256

## TCP TIME_WAIT reuse (keep reuse, remove recycle)
## This is not a server, so use low value
net.ipv4.tcp_max_tw_buckets=10000
# net.ipv4.tcp_tw_recycle=1  # deprecated, removed
net.ipv4.tcp_tw_reuse=1
## Limit ICMP to use less resources
net.ipv4.icmp_ratelimit=128
## Save energy via slow starts
net.ipv4.tcp_slow_start_after_idle=1
## Do not save TCP metrics. Client connects to many APs. This is an edge case to disable RTT saving

## Forcefully probe MTU to prevent mismatch
net.ipv4.tcp_mtu_probing=1
## Prevent buffering while sacrificing network performance
net.ipv4.tcp_congestion_control=reno
